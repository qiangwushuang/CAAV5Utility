//===================================================================
// COPYRIGHT  2021/04/06
//===================================================================
// SystemUtility.cpp
// Header definition of class SystemUtility
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/04/06 Creation: Code generated by the 3DS wizard
//===================================================================

#include "SystemUtility.h"
#include "CATDlgNotify.h"
#include "CATIBRepAccess.h"
#include "CATBody.h"
#include "CATFace.h"
#include "CAT3DBoundingSphere.h"
#include "CAT3DBagRep.h"
#include "CAT3DViewer.h"
#include "CATVisManager.h"
#include "CATCSO.h"
#include "CATHSO.h"
#include "CATIBuildPath.h"
#include "CATInit.h"
#include "CATPrsWorkModeServices.h"
#include "CATIPrtContainer.h"
#include "CATIDocRoots.h"
#include "CATFrmEditor.h"
#include "CATILinkableObject.h"
#include "CATDocument.h"
#include "CATIProduct.h"
#include "CATModify.h"
#include "CATIRedrawEvent.h"
#include "CATIModelEvents.h"
#include "CATVisPropertiesValues.h"
#include "CATIVisProperties.h"
#include "CATGetEnvValue.h"
#include "CATIAlias.h"
#include "CATUnicodeString.h"
#include "CATApplicationFrame.h"
#include "CATMfBRepDecode.h"
#include "CATDlgUtility.h"
#include "CATDlgWindow.h"

//-----------------------------------------------------------------------------
// SystemUtility : constructor
//-----------------------------------------------------------------------------
SystemUtility::SystemUtility()
{
//
//TODO: Add the constructor code here
//
}

//-----------------------------------------------------------------------------
// SystemUtility : destructor
//-----------------------------------------------------------------------------

SystemUtility::~SystemUtility()
{
//
// TODO: Place code here.
//
}


#include <IPHlpApi.h>
#pragma comment(lib, "IPHLPAPI.lib")
CATUnicodeString SystemUtility::GetMACID()
{
	CATUnicodeString MACID;

	PIP_ADAPTER_INFO pIpAdapterInfo = new IP_ADAPTER_INFO();
	unsigned long stSize = sizeof(IP_ADAPTER_INFO);
	int nRel = GetAdaptersInfo(pIpAdapterInfo,&stSize);
	if (ERROR_BUFFER_OVERFLOW==nRel)
	{
		delete pIpAdapterInfo;
		//重新申请内存空间用来存储所有网卡信息
		pIpAdapterInfo = (PIP_ADAPTER_INFO)new BYTE[stSize];
		//再次调用GetAdaptersInfo函数,填充pIpAdapterInfo指针变量
		nRel=GetAdaptersInfo(pIpAdapterInfo,&stSize);    
	}
	if (ERROR_SUCCESS==nRel)
	{
		//输出网卡信息
		for(PIP_ADAPTER_INFO pAdapter = pIpAdapterInfo; pAdapter != NULL; pAdapter = pAdapter->Next)
		{
			if(pAdapter->Type  != MIB_IF_TYPE_ETHERNET)
				continue;
			// 确保MAC地址的长度为 00-00-00-00-00-00
			if(pAdapter->AddressLength != 6)
				continue;
			char acMAC[32];
			sprintf_s(acMAC, "%02X-%02X-%02X-%02X-%02X-%02X",
				int (pAdapter->Address[0]),
				int (pAdapter->Address[1]),
				int (pAdapter->Address[2]),
				int (pAdapter->Address[3]),
				int (pAdapter->Address[4]),
				int (pAdapter->Address[5]));

			MACID = acMAC;

			break;
		}
	}
	//释放内存空间
	if (pIpAdapterInfo)
	{
		delete pIpAdapterInfo;
	}

	return MACID;
}


CATUnicodeString SystemUtility::GetAlias(CATBaseUnknown_var ispIObj)
{
	CATUnicodeString sAlias ;
	CATIAlias_var spIAlias = ispIObj;
	if (spIAlias != NULL_var)
	{
		sAlias = spIAlias->GetAlias();
	}
	return sAlias;
}


CATUnicodeString SystemUtility::SearchFile(const CATUnicodeString &iFile)
{
	CATUnicodeString sFile;
	char *pInstallPath = NULL;
	if (CATLibSuccess == ::CATGetEnvValue("CATInstallPath",&pInstallPath) && pInstallPath != NULL)
	{
		CATListValCATUnicodeString ListOfInsPath = StringToList(pInstallPath,";");
		for (int IndexOfPath = 1; IndexOfPath <= ListOfInsPath.Size() ; IndexOfPath++)
		{
			CATUnicodeString sPath = StringRemoveChar(ListOfInsPath[IndexOfPath],"\\",CATUnicodeString::CATSearchModeBackward);
			sPath = StringRemoveChar(ListOfInsPath[IndexOfPath],"/",CATUnicodeString::CATSearchModeBackward);

			sFile = sPath+"\\"+iFile;
			if (_access(sFile.ConvertToChar(),0) == 0)
			{
				break;
			}
			sFile = "";
		}
	}

	return sFile;
}

CATUnicodeString SystemUtility::StringRemoveChar(CATUnicodeString iStr,const CATUnicodeString &iChar,const CATUnicodeString::CATSearchMode &iSearchMode)
{
	int pos = iStr.SearchSubString(iChar,0,iSearchMode);
	switch (iSearchMode)
	{
	case CATUnicodeString::CATSearchModeForward:
		while ( pos == 0)
		{
			iStr.Remove(0,1);
			pos	 = iStr.SearchSubString(iChar,0,iSearchMode);
		}
		break;
	case CATUnicodeString::CATSearchModeBackward:
		while ( pos == iStr.GetLengthInChar() - 1)
		{
			iStr.Remove(pos,1);
			pos	 = iStr.SearchSubString(iChar,0,iSearchMode);
		}
	default:
		break;
	}
	return iStr;
}

CATListValCATUnicodeString SystemUtility::StringToList(const CATUnicodeString& isLongString, const CATUnicodeString& isSplitStr)
{
	CATListValCATUnicodeString listRst;
	CATUnicodeString sTemp = isLongString;
	int splitSize = isSplitStr.GetLengthInChar();

	int e = 0;
	while (e >= 0)
	{
		e = sTemp.SearchSubString(isSplitStr, 0);
		if (e == -1)
		{
			listRst.Append(sTemp);
		}
		else
		{
			CATUnicodeString token = sTemp.SubString(0, e);
			listRst.Append(token);
		}
		sTemp = sTemp.SubString(e + splitSize, sTemp.GetLengthInChar() - e - splitSize);
	}
	return listRst;
}

CATUnicodeString SystemUtility::PathAppendFile(const CATUnicodeString &iDir,const CATUnicodeString &iFile)
{
	if (iDir.SearchSubString("\\",0,CATUnicodeString::CATSearchModeBackward) == iDir.GetLengthInChar() - 1 )
	{
		return iDir+iFile;
	}
	else if (iDir.SearchSubString("/",0,CATUnicodeString::CATSearchModeBackward) == iDir.GetLengthInChar() - 1 )
	{
		return iDir+iFile;
	}
	else 
	{
		return iDir+"\\"+iFile;

	}

}

bool SystemUtility::SetVisibility(CATBaseUnknown_var iObj,bool isHide)
{
	CATIVisProperties_var spVisuSpec = iObj;
	if (spVisuSpec != NULL_var)
	{
		CATVisPropertiesValues MyProp;
		if (!isHide)
		{
			MyProp.SetShowAttr(CATShowAttr);
		}
		else
		{
			MyProp.SetShowAttr(CATNoShowAttr);
		}
		spVisuSpec->SetPropertiesAtt(MyProp,CATVPShow,CATVPGlobalType);

		CATIModelEvents_var spModelEventOnMF(iObj);
		CATModify catevent(iObj);
		if ( NULL_var != spModelEventOnMF )
		{
			spModelEventOnMF->Dispatch(catevent);	 
		}
		CATIRedrawEvent_var spRedrawEventOnMF(iObj);
		if ( NULL_var != spRedrawEventOnMF )
		{
			spRedrawEventOnMF->Redraw();
		}
	}
	else
	{
		return false;
	}
	return true;

}

CATUnicodeString SystemUtility::GetProductPath(CATIProduct_var ispIProduct)
{
	CATUnicodeString oPath = "";
	if (ispIProduct != NULL_var)
	{
		CATDocument *pDoc = NULL;
		if (SUCCEEDED(GetDocumentFromProduct(ispIProduct,pDoc)) && pDoc != NULL)
		{
			oPath = pDoc->StorageName();
		}
	}
	return oPath;
}


HRESULT SystemUtility::GetDocumentFromProduct(CATIProduct_var ispIProduct,CATDocument *&oDoc)
{
	HRESULT rc = E_INVALIDARG;
	if ( NULL_var == ispIProduct ) return E_FAIL ;

	CATIProduct_var spRef = ispIProduct->GetReferenceProduct();

	if ( NULL_var != spRef )
	{
		CATILinkableObject * piLinkableObject = NULL;
		rc = spRef->QueryInterface( IID_CATILinkableObject, (void**)& piLinkableObject );                            

		if ( SUCCEEDED(rc) )
		{
			oDoc = piLinkableObject->GetDocument();
		}
	}
	return rc;
}


HRESULT SystemUtility::GetRootProduct(CATIProduct_var &oPrd)
{
	HRESULT rc = E_FAIL;
	CATFrmEditor *pFrmEditor = CATFrmEditor::GetCurrentEditor();
	if (pFrmEditor != NULL)
	{
		CATDocument *pCurDoc = pFrmEditor->GetDocument();
		if (pCurDoc != NULL_var)
		{
			CATUnicodeString DocType = pCurDoc->GetType();
			DocType.ToLower();
			if(DocType == "catproduct" || DocType == "catpart")
			{
				//打开的为产品
				CATIDocRoots_var spiDocRootsOnDoc = pCurDoc;
				if (spiDocRootsOnDoc != NULL_var)
				{
					CATListValCATBaseUnknown_var *pRootProducts = spiDocRootsOnDoc->GiveDocRoots();
					CATIProduct_var spiProduct = NULL_var;
					if ( NULL != pRootProducts)
					{
						if (pRootProducts->Size())
						{  
							// the root product is first element of
							// the list of root elements.
							oPrd = (*pRootProducts)[1];
							delete pRootProducts;
							pRootProducts = NULL;

							rc= S_OK;
						}
					}
				}
			}
		}
	}
	return rc;
}




CATUnicodeString SystemUtility::GetUserName()
{
	char strBuffer[256] ={0};
	DWORD dwSize = 256;
	GetUserNameA(strBuffer,&dwSize);

	return strBuffer;
}

CATUnicodeString SystemUtility::GetCATIAVersion()
{
#ifdef CATIAV5R29
	return "V5 R29";
#endif
#ifdef CATIAV5R28
	return "V5 R28";
#endif
#ifdef CATIAV5R27
	return "V5 R27";
#endif
#ifdef CATIAV5R26
	return "V5 R26";
#endif
#ifdef CATIAV5R25
	return "V5 R25";
#endif
#ifdef CATIAV5R24
	return "V5 R24";
#endif
#ifdef CATIAV5R23
	return "V5 R23";
#endif
#ifdef CATIAV5R22
	return "V5 R22";
#endif
#ifdef CATIAV5R21
	return "V5 R21";
#endif
#ifdef CATIAV5R20
	return "V5 R20";
#endif
#ifdef CATIAV5R19
	return "V5 R19";
#endif
#ifdef CATIAV5R18
	return "V5 R18";
#endif
#ifdef CATIAV5R17
	return "V5 R17";
#endif
#ifdef CATIAV5R16
	return "V5 R16";
#endif
#ifdef CATIAV5R15
	return "V5 R15";
#endif
#ifdef CATIAV5R14
	return "V5 R14";
#endif
#ifdef CATIAV5R13
	return "V5 R13";
#endif
#ifdef CATIAV5R12
	return "V5 R12";
#endif
}

int SystemUtility::CaculateWeekDay(int y,int m,int d)
{
	if(m==1||m==2) {
		m+=12;
		y--;
	}
	int iWeek=(d+2*m+3*(m+1)/5+y+y/4-y/100+y/400)%7;
	return iWeek + 1;
}

bool SystemUtility::IsDirectoryExist(const CATUnicodeString &iDir,const bool &iCreate)
{
	if (!iCreate)
	{
		//不创建的情况下，仅检查
		if (_access(iDir.ConvertToChar(),0) == 0)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	else
	{
		//创建模式(仅支持windows)
		CATUnicodeString sDir = iDir;
		sDir.ReplaceAll("\\","/");
		while (sDir.SearchSubString("//") > 0)
		{
			sDir.ReplaceAll("//","/");
		}
		int pos = 4;
		pos = sDir.SearchSubString("/",pos);
		while (pos > 0)
		{
			//检查路径是否存在
			CATUnicodeString PrefixDir = sDir.SubString(0,pos);
			if (_access(PrefixDir.ConvertToChar(),0) != 0)
			{
				CATCreateDirectory(PrefixDir.ConvertToChar());
			}
			pos = sDir.SearchSubString("/",pos+1);
		}

		if (_access(sDir.ConvertToChar(), 0) != 0)
		{
			CATCreateDirectory(sDir.ConvertToChar());
		}
	}

	return _access(iDir.ConvertToChar(),0) == 0;
}


HRESULT SystemUtility::Highlight(CATBaseUnknown_var iPath)
{
	HRESULT rc = E_FAIL;
	CATFrmEditor * pCurEditor = CATFrmEditor::GetCurrentEditor();
	if (pCurEditor)
	{
		CATPathElement  oActivePath = pCurEditor->GetUIActiveObject();    
		CATIBuildPath * pBuildPath = NULL;
		iPath-> QueryInterface(IID_CATIBuildPath,(void**)&pBuildPath);
		if(!!pBuildPath)
		{
			CATPathElement * pPathElement=new CATPathElement;
			rc = pBuildPath->ExtractPathElement(&oActivePath,&pPathElement);
			if(S_OK == rc)    
			{
				CATHSO * pHSO = NULL;
				CATCSO * pCSO = NULL;
				pHSO = pCurEditor -> GetHSO();
				pCSO = pCurEditor -> GetCSO();

				pHSO -> AddElements(pPathElement);
				pCSO -> AddElement(pPathElement);
				pBuildPath->Release();
				pBuildPath= NULL; 
				pHSO ->EndAddElements();
			}
		}
	}

	return S_OK;
}

HRESULT SystemUtility::HighlightFace(CATFace_var ispFace,CATBody_var iBody)
{
	if (ispFace == NULL || iBody == NULL)
	{
		return E_FAIL;
	}
	CATIBRepAccess_var currentFace = ::CATBRepDecodeCellInBody(ispFace,iBody);
	if (currentFace != NULL_var)
	{
		SystemUtility::Highlight(currentFace);
	}

	return S_OK;
}

void SystemUtility::ClearHighlight()
{
	CATFrmEditor * pCurEditor = CATFrmEditor::GetCurrentEditor();
	if (pCurEditor)
	{
		CATHSO *pActiveHSO = pCurEditor->GetHSO();    
		if(pActiveHSO)
		{
			pActiveHSO->Empty();
		}
		CATCSO *pActiveCSO = pCurEditor->GetCSO();    
		if(pActiveCSO)
		{
			pActiveCSO->Empty();
		}
	}
}



HRESULT SystemUtility::ReframeOnHighLight()
{
	HRESULT rc = E_FAIL;
	CATVisManager *pVisManager = CATVisManager::GetVisManager();
	if (pVisManager != NULL)
	{
		//得到3dview
		CAT3DViewer *p3DViewer = NULL;
		CATFrmLayout *pFrmLayout = CATFrmLayout::GetCurrentLayout();
		if (pFrmLayout != NULL)
		{
			CATFrmWindow *pFrmWindow = pFrmLayout->GetCurrentWindow();
			if (pFrmWindow != NULL)
			{
				p3DViewer = (CAT3DViewer *)pFrmWindow->GetViewer();
			}
		}

		if (p3DViewer != NULL)
		{
			CATFrmEditor *pFrmEditor = CATFrmEditor::GetCurrentEditor();
			if (pFrmEditor != NULL)
			{
				CAT3DBagRep *p3DBagRep = new CAT3DBagRep();
				CATHSO *pHso = pFrmEditor->GetHSO();
				if (pHso != NULL)
				{
					pHso->InitElementList();
					CATPathElement *pElement = NULL;
					while((pElement = (CATPathElement *)pHso->NextElement()) && (pElement != NULL))
					{
						CATBaseUnknown_var spIHSOObj = pElement->FindElement(IID_CATBaseUnknown);
						if (spIHSOObj != NULL)
						{
							CATModelIdentificator ident(spIHSOObj);

							CATRep *pRep = pVisManager->BuildRep(ident);
							if (pRep != NULL)
							{
								rc = p3DBagRep->AddChild(*pRep);
							}
						}
					}
				}
				if (SUCCEEDED(rc))
				{
					CAT3DBoundingSphere BoundingSphere = p3DBagRep->GetBoundingElement();
					p3DViewer->ReframeOn(BoundingSphere);
					p3DViewer->Draw();
				}
			}
		}
	}

	return rc;
}

int SystemUtility::Msg(CATUnicodeString isMsg /* = "" */,CATUnicodeString isTitle /* = "" */,unsigned long Style /* = CATDlgNfyInformation */)
{
	CATDlgNotify *pDlgNotify = new CATDlgNotify(CATApplicationFrame::GetFrame()->GetMainWindow(),"Notify",Style);	
	int value = pDlgNotify->DisplayBlocked(isMsg,isTitle);
	pDlgNotify->RequestDelayedDestruction();
	pDlgNotify = NULL;
	return value;
}