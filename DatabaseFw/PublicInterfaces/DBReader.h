//===================================================================
// COPYRIGHT liqiang 2021/05/29
//===================================================================
// DBReader.cpp
// Header definition of class DBReader
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/05/29 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef DBReader_H
#define DBReader_H

#include "DatabaseOperator.h"
#include "CATUnicodeString.h"
#include <vector>

class sqlite3;
namespace liqiang{
	class ExportedByDatabaseOperator DBReader
	{
		enum DatabaseType
		{
			UNSet,		//未定义（默认值）
			SQLite		//SQList数据库
		};

	public:
	// Standard constructors and destructors
	// -------------------------------------
	DBReader ();
	virtual ~DBReader ();
	/*
		Role    :
			打开SQL数据库
		Param	:	
			const CATUnicodeString & iFile : 
		Return	:   
			bool
		
		Create	:
			liqiang Date : 20210601
	*/
	bool OpenSQLite(const CATUnicodeString &iFile);
	/*
		Role    :
			数据库是否有效
		Param	:	
		Return	:   
			bool
		
		Create	:
			liqiang Date : 20210601
	*/
	bool isValid() const {return _isValid;}
	/*
		Role    :
			运行SQL命令，第一行为标题
		Param	:	
			const CATUnicodeString & iSQL : 
			std::vector<std::vector<CATUnicodeString>> & oDatas : 
		Return	:   
			bool
		
		Create	:
			liqiang Date : 20210601
	*/
	bool RunSQL(const CATUnicodeString &iSQL,std::vector<std::vector<CATUnicodeString>> &oDatas);

	private:
	// Copy constructor and equal operator
	// -----------------------------------
	DBReader (DBReader &);
	DBReader& operator=(DBReader&);

	bool _isValid;

	sqlite3 *db;
	DatabaseType _DBType;

	};

//-----------------------------------------------------------------------
}
#endif
