//===================================================================
// COPYRIGHT  2021/04/06
//===================================================================
// ExcelHander.cpp
// Header definition of class ExcelHander
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/04/06 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef ExcelHander_H
#define ExcelHander_H

#include "ExcelOperator.h"
#include "ExcelEnumDef.h"
#include "CATUnicodeString.h"
#include "CATListOfCATUnicodeString.h"

class CExcelOperator;
//-----------------------------------------------------------------------

class ExportedByExcelOperator ExcelHander
{
public:
// Standard constructors and destructors
// -------------------------------------
ExcelHander ();
virtual ~ExcelHander ();

//
// TODO: Add your methods for this class here.
//

bool WOpen();
bool WOpen(CATUnicodeString strFile);
bool WOpenSheet(int i );
bool WOpenSheet(CATUnicodeString istrSheet);
bool WSetCurrentSheetName(CATUnicodeString iSheetName);
bool WGetSheetsCount(int& osheetcount);
CATUnicodeString WGetCurrentSheetName();
bool WAdd_Column(int column);
bool WDelete_Column(int column);
bool WAdd_Row(int row);
bool WDelete_Row(int row);
bool WGet_Rows_Columns(int& nrow, int& ncolumn);
BOOL WSetItemText(long Row,long Col,CATUnicodeString strText);
CATUnicodeString WGetItemText(long Row,long Col);
void WGetRange(CATUnicodeString strBegin,CATUnicodeString strEnd);
void WMergeRange(CATUnicodeString strBegin, CATUnicodeString strEnd);
void WAutoColFit();
void WAutoRowFit();
void WSetWrapText(BOOL blnTrue);
void WGetAllRange();
long WGetRowS();
long WGetUsedRows();
long WGetColS();
long WGetUsedCols();
void WSetNumberFormat(const int &iIndexOfFormat);
void WSetColumnWidth(int intWidth);
void WSetRowHeight(int intHeight);
BOOL WReadRow(CATListOfCATUnicodeString &oRowValues, long irow);
BOOL WReadRow(CATListOfCATUnicodeString &ostrRowValues,long irow,long icolBegin,long icolEnd);
BOOL WWriteRow(CATListOfCATUnicodeString &istrRowValues,long irow);
BOOL WWriteRow(CATListOfCATUnicodeString &strRowValues,long irow,long icolBegin);
BOOL WReadColumn(CATListOfCATUnicodeString &ostrColValues,long icol);
BOOL WReadColumn(CATListOfCATUnicodeString &ostrColValues,long icol,long irowBegin,long irowEnd);
BOOL WWriteColumn(CATListOfCATUnicodeString &istrColValues,long icol);
BOOL WWriteColumn(CATListOfCATUnicodeString &istrColValues,long icol,long irowBegin);
BOOL WCopySheet(CATUnicodeString sheetName);
BOOL WDeleteSheet(CATUnicodeString sheetName);
BOOL WGetSheetName(long iindex,CATUnicodeString &osheetName);
void WSetAlignment(const int &iIndexOfAligment);
void WAddSheet(CATUnicodeString iSheetName);
void SetFont(CATUnicodeString iStartCell,CATUnicodeString iEndCell,CATUnicodeString iFontName);
void SetFontColor(CATUnicodeString iStartCell,CATUnicodeString iEndCell,int r,int g,int b);
/*
	Role    :
		设置字体大小
	Param	:	
		@ CATUnicodeString iStartCell]
		@ CATUnicodeString iEndCell]
		@ long iFontSize]
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220218
*/
void SetFontSize(CATUnicodeString iStartCell,CATUnicodeString iEndCell,long iFontSize);
/*
	Role    :
		设置字体加粗
	Param	:	
		@ CATUnicodeString iStartCell]
		@ CATUnicodeString iEndCell]
		@ long iFontSize]
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220218
*/
void SetFontBold(CATUnicodeString iStartCell,CATUnicodeString iEndCell,BOOL iBold);
BOOL WReadRowEx(CATListOfCATUnicodeString &oRowValues,long irow);
void WSave();
void WSaveAs(CATUnicodeString strPath);
void WExit();
bool WClose();
void SetBorder(CATUnicodeString iStartCell,CATUnicodeString iEndCell,long iPos=xlAllSide,long iStyle=xlContinuous,long iWidth=xlThin,int r=0,int g=0,int b=0);

/*
	Role    :
		设置对齐方式
	Param	:	
		@ CATUnicodeString iStartCell]
		@ CATUnicodeString iEndCell]
		@ long iHorizontalAlignment]
		@ long iVerticalAlignment]
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220218
*/
void SetAlignment(CATUnicodeString iStartCell,CATUnicodeString iEndCell,long iHorizontalAlignment,long iVerticalAlignment);

/*
	Role    :
		设置列宽
	Param	:	
		@ CATUnicodeString iColumn]
		@ long iWidth]
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220218
*/
void SetColumnWidth(CATUnicodeString iColumn,double iWidth);
/*
	Role    :
		插入图片
	Param	:	
		@ CATUnicodeString iStartCell]
		@ CATUnicodeString iEndCell]
		@ CATUnicodeString iPicture]
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220219
*/
void InsertPicture(CATUnicodeString iStartCell,CATUnicodeString iEndCell,CATUnicodeString iPicture);
/*
	Role    :
		设置行高
	Param	:	
		@ CATUnicodeString iRow]
		@ double iHeight]
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220221
*/
void SetRowHeight(CATUnicodeString iRow,double iHeight);
void SetTextWrap(CATUnicodeString iStartCell,CATUnicodeString iEndCell,BOOL iWrap);
void SetAutoColFit(CATUnicodeString iStartCell,CATUnicodeString iEndCell);
void SetAutoRowFit(CATUnicodeString iStartCell,CATUnicodeString iEndCell);


/*
	Role    :
		将单元格内容与Sheet页超链接
	Param	:	
		@ CATUnicodeString iCell
		@ CATUnicodeString iLinksSheetName
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220302
*/
void SetCellHyperlinksToSheet(CATUnicodeString iCell,CATUnicodeString iLinksSheetName);

/*
	Role    :
		删除所有的Sheet，注意：EXCEL要求至少有一个Sheet存在所以，并不是删除所有
	Param	:	
	Return	:   
		@ void
	
	Create	:
		liqiang Date : 20220302
*/
void DeleteAllSheets();
private:
// Copy constructor and equal operator
// -----------------------------------
ExcelHander (ExcelHander &);
ExcelHander& operator=(ExcelHander&);

CExcelOperator *pExcelOperator;
};

//-----------------------------------------------------------------------

#endif
