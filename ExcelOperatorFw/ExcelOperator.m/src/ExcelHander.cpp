//===================================================================
// COPYRIGHT  2021/04/06
//===================================================================
// ExcelHander.cpp
// Header definition of class ExcelHander
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/04/06 Creation: Code generated by the 3DS wizard
//===================================================================

#include "ExcelHander.h"

#include "CExcelOperator.h"
//-----------------------------------------------------------------------------
// ExcelHander : constructor
//-----------------------------------------------------------------------------
ExcelHander::ExcelHander()
{
	pExcelOperator = new CExcelOperator();
}

//-----------------------------------------------------------------------------
// ExcelHander : destructor
//-----------------------------------------------------------------------------

ExcelHander::~ExcelHander()
{
	if (pExcelOperator != NULL)
{
	pExcelOperator->Close();
	pExcelOperator->Exit();
	pExcelOperator = NULL;
}
}



char* U2G(const char* utf8)
{
	int len = MultiByteToWideChar(CP_UTF8, 0, utf8, -1, NULL, 0);
	wchar_t* wstr = new wchar_t[len+1];
	memset(wstr, 0, len+1);
	MultiByteToWideChar(CP_UTF8, 0, utf8, -1, wstr, len);
	len = WideCharToMultiByte(CP_ACP, 0, wstr, -1, NULL, 0, NULL, NULL);
	char* str = new char[len+1];
	memset(str, 0, len+1);
	WideCharToMultiByte(CP_ACP, 0, wstr, -1, str, len, NULL, NULL);
	if(wstr) delete[] wstr;
	return str;
}

//------------------------------------------------------------------------------------------------------
//CString Change To CATUnicodeString
//------------------------------------------------------------------------------------------------------
CATUnicodeString TranslateToCATUnicodeString(CString iCStr)
{
	CATUnicodeString StrQueried("");
	BSTR  bstr   = iCStr.AllocSysString();
	StrQueried.BuildFromBSTR(bstr);
	return StrQueried;
}
//------------------------------------------------------------------------------------------------------
//CATUnicodeString Change To CString
//------------------------------------------------------------------------------------------------------




CString TranslateToCString(CATUnicodeString iCATUniStr)
{
	CString cStr;
	wchar_t *wc = new wchar_t[iCATUniStr.GetLengthInChar()+1];
	/*const char *p = */iCATUniStr.ConvertToWChar(wc);
	cStr = wc;
	return cStr;
}

bool ExcelHander::WOpen()
{
	bool IsOK = false;
	if (pExcelOperator)
	{
		IsOK=pExcelOperator->Open();
	}
	return IsOK;
}

bool ExcelHander::WOpen(CATUnicodeString strFile)
{
	if (_access(strFile,0)==-1)
	{
		return false;
	}
	if (NULL == pExcelOperator) return false;
	bool flag = pExcelOperator->Open(TranslateToCString(strFile));
	return flag;
}

bool ExcelHander::WOpenSheet(int i )
{
	if (NULL == pExcelOperator) return false;
	bool flag = pExcelOperator->OpenSheet(i);
	return flag;
}
//辅助函数
//CWorksheet ExcelHander::WGetSheet_CopyFrom(int i)
//{
//	bool flag = pExcelOperator->GetSheet_CopyFrom(i);
//	return flag;
//}

void ExcelHander::WSave()
{
	pExcelOperator->Save();
}

void ExcelHander::WSaveAs(CATUnicodeString strPath)
{
	pExcelOperator->SaveAs(TranslateToCString(strPath));
}

void ExcelHander::WExit()
{
	if (pExcelOperator != NULL)
	{
		pExcelOperator->Exit();
		pExcelOperator = NULL;
	}
}


bool ExcelHander::WClose()
{
	bool flag = pExcelOperator->Close();
	return flag;
}

bool ExcelHander::WOpenSheet(CATUnicodeString istrSheet)
{
	CString cstrSheet = TranslateToCString(istrSheet);
	bool flag = pExcelOperator->OpenSheet(cstrSheet);
	return flag;
}

bool ExcelHander::WSetCurrentSheetName(CATUnicodeString iSheetName)
{
	CString cstrSheetName = TranslateToCString(iSheetName);
	bool flag = pExcelOperator->SetCurrentSheetName(cstrSheetName);
	return flag;
}

bool ExcelHander::WGetSheetsCount(int& osheetcount)
{
	bool flag = pExcelOperator->GetSheetsCount(osheetcount);
	return flag;
}

CATUnicodeString ExcelHander::WGetCurrentSheetName()
{
	CString cstrSheetName = pExcelOperator->GetCurrentSheetName();
	return TranslateToCATUnicodeString(cstrSheetName);
}

bool ExcelHander::WAdd_Column(int column)
{
	bool flag = pExcelOperator->Add_Column(column);
	return flag;
}

bool ExcelHander::WDelete_Column(int column)
{
	bool flag = pExcelOperator->Delete_Column(column);
	return flag;
}

bool ExcelHander::WAdd_Row(int row)
{
	bool flag = pExcelOperator->Add_Row(row);
	return flag;
}

bool ExcelHander::WDelete_Row(int row)
{
	bool flag = pExcelOperator->Delete_Row(row);
	return flag;
}

bool ExcelHander::WGet_Rows_Columns(int& nrow, int& ncolumn)
{
	bool flag = pExcelOperator->Get_Rows_Columns(nrow, ncolumn);
	return flag;
}


BOOL ExcelHander::WSetItemText(long Row,long Col,CATUnicodeString strText)
{
	CString cstrText = TranslateToCString(strText);
	bool flag = pExcelOperator->SetItemText(Row, Col, cstrText);
	return flag;
}

CATUnicodeString ExcelHander::WGetItemText(long Row,long Col)
{
	CString cstrItemText = pExcelOperator->GetItemText(Row, Col);
	return TranslateToCATUnicodeString(cstrItemText);
}



void ExcelHander::WGetRange(CATUnicodeString strBegin,CATUnicodeString strEnd)
{
	CString cstrBegin = TranslateToCString(strBegin);
	CString cstrEnd = TranslateToCString(strEnd);
	pExcelOperator->GetRange(cstrBegin, cstrEnd);
}

void ExcelHander::WMergeRange(CATUnicodeString strBegin, CATUnicodeString strEnd)
{
	CString cstrBegin = TranslateToCString(strBegin);
	CString cstrEnd = TranslateToCString(strEnd);
	pExcelOperator->MergeUnits(cstrBegin, cstrEnd);
}

void ExcelHander::WAutoColFit()
{
	pExcelOperator->AutoColFit();
}

void ExcelHander::WAutoRowFit()
{
	pExcelOperator->AutoRowFit();
}

void ExcelHander::WSetWrapText(BOOL blnTrue)
{
	pExcelOperator->SetWrapText(blnTrue);
}


void ExcelHander::WGetAllRange()
{
	pExcelOperator->GetAllRange();
}


long ExcelHander::WGetRowS()
{
	long Rows = pExcelOperator->GetRowS();
	return Rows;
}

long ExcelHander::WGetUsedRows()
{
	long UsedRows = pExcelOperator->GetUsedRows();
	return UsedRows;
}

long ExcelHander::WGetColS()
{
	long ColS = pExcelOperator->GetColS();
	return ColS;
}

long ExcelHander::WGetUsedCols()
{
	long UsedCols = pExcelOperator->GetUsedCols();
	return UsedCols;
}

void ExcelHander::WSetNumberFormat(const int &iIndexOfFormat)
{
	MyNumberFormat NumberFormat;
	NumberFormat.strValue = NumberFormat.GetText();
	switch (iIndexOfFormat)
	{
	case 1:
		pExcelOperator->SetNumberFormat(NumberFormat);
		break;
	default:
		break;
	}
}

void ExcelHander::WSetColumnWidth(int intWidth)
{
	pExcelOperator->SetColumnWidth(intWidth);
}

void ExcelHander::WSetRowHeight(int intHeight)
{
	pExcelOperator->SetRowHeight(intHeight);
}



BOOL ExcelHander::WReadRow(CATListOfCATUnicodeString &oRowValues, long irow)
{
	CStringArray CRowValues;
	BOOL flag  = pExcelOperator->ReadRow(CRowValues, irow);
	int nb=CRowValues.GetSize();   //得到长度
	for (int i_child = 0; i_child<nb; i_child++)
	{
		CString strTmp=CRowValues.GetAt(i_child);   
		CATUnicodeString StrTemp = TranslateToCATUnicodeString(strTmp);
		oRowValues.Append(StrTemp);
	}
	return flag;
}

BOOL ExcelHander::WReadRowEx(CATListOfCATUnicodeString &oRowValues,long irow)
{
	CStringArray CRowValues;
	BOOL flag  = pExcelOperator->ReadRowEx(CRowValues, irow);
	int nb=CRowValues.GetSize();   //得到长度
	for (int i_child = 0; i_child<nb; i_child++)
	{
		CString strTmp=CRowValues.GetAt(i_child);   
		CATUnicodeString StrTemp = TranslateToCATUnicodeString(strTmp);
		oRowValues.Append(StrTemp);
	}
	return flag;
}

BOOL ExcelHander::WReadRow(CATListOfCATUnicodeString &ostrRowValues,long irow,long icolBegin,long icolEnd)
{
	CStringArray CRowValues;
	BOOL flag  = pExcelOperator->ReadRow(CRowValues, irow, icolBegin, icolEnd);
	int nb=CRowValues.GetSize();   //得到长度
	for (int i_child = 0; i_child<nb; i_child++)
	{
		CString strTmp=CRowValues.GetAt(i_child);   
		CATUnicodeString StrTemp = TranslateToCATUnicodeString(strTmp);
		ostrRowValues.Append(StrTemp);
	}
	return flag;
}

BOOL ExcelHander::WWriteRow(CATListOfCATUnicodeString &istrRowValues,long irow)
{
	CStringArray CRowValues;
	int nb=istrRowValues.Size();  
	for (int i_child = 1; i_child<=nb; i_child++)
	{
		CATUnicodeString strTmp = istrRowValues[i_child];   
		CString StrTemp = TranslateToCString(strTmp);
		CRowValues.Add(StrTemp);
	}
	BOOL flag  = pExcelOperator->WriteRow(CRowValues, irow);
	return flag;
}

BOOL ExcelHander::WWriteRow(CATListOfCATUnicodeString &strRowValues,long irow,long icolBegin)
{
	CStringArray CRowValues;
	int nb=strRowValues.Size();  
	for (int i_child = 1; i_child<=nb; i_child++)
	{
		CATUnicodeString strTmp = strRowValues[i_child];   
		CString StrTemp = TranslateToCString(strTmp);
		CRowValues.Add(StrTemp);
	}
	BOOL flag  = pExcelOperator->WriteRow(CRowValues, irow, icolBegin);
	return flag;
}

BOOL ExcelHander::WReadColumn(CATListOfCATUnicodeString &ostrColValues,long icol)
{
	CStringArray CColValues;
	BOOL flag  = pExcelOperator->ReadColumn(CColValues, icol);
	int nb=CColValues.GetSize();   //得到长度
	for (int i_child = 0; i_child<nb; i_child++)
	{
		CString strTmp=CColValues.GetAt(i_child);   
		CATUnicodeString StrTemp = TranslateToCATUnicodeString(strTmp);
		ostrColValues.Append(StrTemp);
	}
	return flag;
}

BOOL ExcelHander::WReadColumn(CATListOfCATUnicodeString &ostrColValues,long icol,long irowBegin,long irowEnd)
{
	CStringArray CColValues;
	BOOL flag  = pExcelOperator->ReadColumn(CColValues, icol, irowBegin, irowEnd);
	int nb=CColValues.GetSize();   //得到长度
	for (int i_child = 0; i_child<nb; i_child++)
	{
		CString strTmp=CColValues.GetAt(i_child);   
		CATUnicodeString StrTemp = TranslateToCATUnicodeString(strTmp);
		ostrColValues.Append(StrTemp);
	}
	return flag;
}

BOOL ExcelHander::WWriteColumn(CATListOfCATUnicodeString &istrColValues,long icol)
{
	CStringArray CColValues;
	int nb=istrColValues.Size();  
	for (int i_child = 1; i_child<=nb; i_child++)
	{
		CATUnicodeString strTmp = istrColValues[i_child];   
		CString StrTemp = TranslateToCString(strTmp);
		CColValues.Add(StrTemp);
	}
	BOOL flag  = pExcelOperator->WriteColumn(CColValues, icol);
	return flag;
}

BOOL ExcelHander::WWriteColumn(CATListOfCATUnicodeString &istrColValues,long icol,long irowBegin)
{
	CStringArray CColValues;
	int nb=istrColValues.Size();  
	for (int i_child = 1; i_child<=nb; i_child++)
	{
		CATUnicodeString strTmp = istrColValues[i_child];   
		CString StrTemp = TranslateToCString(strTmp);
		CColValues.Add(StrTemp);
	}
	BOOL flag  = pExcelOperator->WriteColumn(CColValues, icol, irowBegin);
	return flag;
}

BOOL ExcelHander::WCopySheet(CATUnicodeString sheetName)
{
	CString CSheetName = TranslateToCString(sheetName);
	BOOL flag  = pExcelOperator->CopySheet(CSheetName);
	return flag;
}
//将名字为sheetName的工作表删除,如果删除的是当前的活动工作表，则将sheetName的
//前一张或是后一张设为当前工作表
BOOL ExcelHander::WDeleteSheet(CATUnicodeString sheetName)
{
	CString CSheetName = TranslateToCString(sheetName);
	BOOL flag  = pExcelOperator->DeleteSheet(CSheetName);
	return flag;
}
//获取指定编号的sheet表的名字,0表示获取当前的sheet名字
BOOL ExcelHander::WGetSheetName(long iindex,CATUnicodeString &osheetName)
{
	CString CSheetName("");
	BOOL flag  = pExcelOperator->GetSheetName(iindex, CSheetName);
	osheetName = TranslateToCATUnicodeString(CSheetName);
	return flag;
}

void ExcelHander::WSetAlignment(const int &iIndexOfAligment)
{
	MyAlignment myAlignment;
	myAlignment.HorizontalAlignment = xlCenter;
	myAlignment.VerticalAlignment = xlTop;
	switch (iIndexOfAligment)
	{
	case 1:
		pExcelOperator->SetAlignment(myAlignment);
		break;
	default:
		break;
	}

}

void ExcelHander::WAddSheet(CATUnicodeString iSheetName)
{
	CString CSheetName = TranslateToCString(iSheetName);
	pExcelOperator->AddSheet(CSheetName);
}

void ExcelHander::SetFont(CATUnicodeString iStartCell,CATUnicodeString iEndCell,CATUnicodeString iFontName)
{
	CString CFontName = TranslateToCString(iFontName);
	pExcelOperator->SetFont(TranslateToCString(iStartCell),TranslateToCString(iEndCell),CFontName);
}

void ExcelHander::SetFontColor(CATUnicodeString iStartCell,CATUnicodeString iEndCell,int r,int g,int b)
{


}

void ExcelHander::SetFontSize(CATUnicodeString iStartCell,CATUnicodeString iEndCell,long iFontSize)
{
	pExcelOperator->SetFontSize(TranslateToCString(iStartCell),TranslateToCString(iEndCell),iFontSize);
}

void ExcelHander::SetFontBold(CATUnicodeString iStartCell,CATUnicodeString iEndCell,BOOL iBold)
{
	pExcelOperator->SetFontBold(TranslateToCString(iStartCell),TranslateToCString(iEndCell),iBold);
}

void ExcelHander::SetBorder(CATUnicodeString iStartCell,CATUnicodeString iEndCell,long iPos,long iStyle,long iWidth,int r,int g,int b)
{
	pExcelOperator->SetBorder(TranslateToCString(iStartCell),TranslateToCString(iEndCell),iPos,iStyle,iWidth,r,g,b);
}

void ExcelHander::SetAlignment(CATUnicodeString iStartCell,CATUnicodeString iEndCell,long iHorizontalAlignment,long iVerticalAlignment)
{
	MyAlignment Aligment;
	Aligment.HorizontalAlignment = iHorizontalAlignment;
	Aligment.VerticalAlignment = iVerticalAlignment;
	pExcelOperator->SetAlignment(TranslateToCString(iStartCell),TranslateToCString(iEndCell),Aligment);
}

void ExcelHander::SetColumnWidth(CATUnicodeString iColumn,double iWidth)
{
	pExcelOperator->SetColumnWidth(TranslateToCString(iColumn+":"+iColumn),iWidth);
}


void ExcelHander::InsertPicture(CATUnicodeString iStartCell,CATUnicodeString iEndCell,CATUnicodeString iPicture)
{
	pExcelOperator->InsertPicture(TranslateToCString(iStartCell),TranslateToCString(iEndCell),TranslateToCString(iPicture));
}

void ExcelHander::SetRowHeight(CATUnicodeString iRow,double iHeight)
{
	pExcelOperator->SetRowHeight(TranslateToCString(iRow+":"+iRow),iHeight);
}

void ExcelHander::SetTextWrap(CATUnicodeString iStartCell,CATUnicodeString iEndCell,BOOL iWrap)
{
	pExcelOperator->SetTextWrap(TranslateToCString(iStartCell),TranslateToCString(iEndCell),iWrap);
}

void ExcelHander::SetAutoColFit(CATUnicodeString iStartCell,CATUnicodeString iEndCell)
{
	pExcelOperator->SetColAutoFit(TranslateToCString(iStartCell),TranslateToCString(iEndCell));

}


void ExcelHander::SetAutoRowFit(CATUnicodeString iStartCell,CATUnicodeString iEndCell)
{
	pExcelOperator->SetRowAutoFit(TranslateToCString(iStartCell),TranslateToCString(iEndCell));


}

void ExcelHander::SetCellHyperlinksToSheet(CATUnicodeString iCell,CATUnicodeString iLinksSheetName)
{
	pExcelOperator->SetCellHyperlinksToSheet(TranslateToCString(iCell),TranslateToCString(iLinksSheetName));
}

void ExcelHander::DeleteAllSheets()
{
	pExcelOperator->DeleteAllSheets();
}
