//===================================================================
// COPYRIGHT  2016/06/08
//===================================================================
// CExcelOperator.cpp
// Header definition of class CExcelOperator
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2016/06/08 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CExcelOperator_H
#define CExcelOperator_H


#if !defined(AFX_EXCELRW_H__5924BB3B_3F3E_4273_AF1B_15E31FC929AC__INCLUDED_)
#define AFX_EXCELRW_H__5924BB3B_3F3E_4273_AF1B_15E31FC929AC__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#ifdef _WINDOWS_
#undef _WINDOWS_
#include <afxdisp.h>
#include "afxwin.h" // MFC core and standard components
#include "afxext.h" // MFC extensions
//#include "afxdisp.h" // MFC Automation classes
#include "afxdtctl.h" // MFC support for Internet Explorer 4 Common Controls
#include "afxcmn.h"

#endif 
#include "CApplication.h"
#include "CWorkbook.h"
#include "CWorkbooks.h"
#include "CWorksheet.h"
#include "CRange.h"
#include "CWorksheets.h"
#include "CPicture.h"
#include "CPictures.h"
#include "CBorder.h"
#include "CBorders.h"
#include "CExcelFont.h"
#include "CInterior.h"
#include "CShapes.h"
#include "CShape.h"
#include "CShapeRange.h"
#include "io.h"
//-----------------------------------------------------------------------

#include "ExcelEnumDef.h"
//边框设置参数类
class MyBorder
{
public:
	//线条形状
	short LineStyle;
	//粗线
	short Weight;
	//颜色
	long Color;
	//构造函数
	MyBorder();
};
//背景设置参数类
class MyBackStyle
{
public:
	//背景颜色
	long Color;
	//背景图案
	short Pattern;
	//背景图案颜色
	long PatternColor;
	//透明不透明
	BOOL transparent;
	//构造函数
	MyBackStyle();
};
//字体设置参数类
class MyFont
{
public:
	//名字
	CString Name;
	//大小
	long size;
	//前景
	long ForeColor;
	//粗体
	BOOL Bold;
	//斜体
	BOOL Italic;
	//中间线
	BOOL Strikethrough;
	//阴影
	BOOL Shadow;
	//下标
	BOOL Subscript;
	//上标
	BOOL Superscricp;
	//下划线
	short Underline;
	//构造函数
	MyFont();
};
//文字对齐方式设置参数类
class MyAlignment
{
public:
	//水平对齐
	short HorizontalAlignment;
	//垂直对齐
	short VerticalAlignment;
	//构造函数
	MyAlignment();
};
//列数据类型的设置参数类
class MyNumberFormat
{
public:
	MyNumberFormat();
	//设置参数
	CString strValue;
	//返回文本类型的设置
	CString GetText();
	//返回数字格式的设置
	//blnBox: 使用分隔符 RightSum: 小数位数 
	CString GetNumber(BOOL blnBox,int RightSum);
	//返回货币格式的设置
	//blnChinese: TURE:"￥",FALSE:"$"
	//RightSum: 小数位数 
	CString GetMoney(BOOL blnChinese,int RightSum);
	//返回日期格式的设置
	//blnChinese: TURE:"年月日",FALSE:"-"
	CString GetDate(BOOL blnChinese);
	//返回时间格式的设置
	//blnChinese: TURE:"时分秒",FALSE:":"
	CString GetTime(BOOL blnChinese);
	//返回常规设置
	CString GetGeneral();
	//返回特殊数字的设置
	//blnChinese: TURE:大写,FALSE:小写
	CString GetDBNumber(BOOL blnChinese);
	//返回百分数的设置
	//RightSum: 小数位数 
	CString GetPercentNumBer(int RightSum);
	//返回分数的设置
	//DownSum:分母位数 DownNum(0): 固定分母数(0)
	CString GetFractionNumBer(int DownSum,int DownNum);
	//返回科学计数的设置
	//RightSum: 小数位数 
	CString GetTechNumBer(int RightSum);
	//返回6位邮政编码格式
	//Sum: 固定邮政编码的位数
	CString GetPost(int Sum);
	//返回日期加时间的设置
	//blnChinese: TURE:"年月日时分秒",FALSE:"-:"
	CString GetDateTime(BOOL blnChinese);
};
//ExportedByOperateExcel
class CExcelOperator
{
public:
	// Standard constructors and destructors
	// -------------------------------------
	CExcelOperator ();
	virtual ~CExcelOperator ();

	//
	// TODO: Add your methods for this class here.
	//

private:
	// Copy constructor and equal operator
	// -----------------------------------
	CExcelOperator (CExcelOperator &);
	CExcelOperator& operator=(CExcelOperator&);

public:
	bool SetCurrentSheetName(CString sheetname);
	bool GetSheetsCount(int& sheetcount);
	CString GetCurrentSheetName();
	bool OpenSheet(int i = 1);
	bool Add_Column(int column);
	bool Delete_Column(int column);
	bool Add_Row(int row);
	bool Delete_Row(int row);
	bool Get_Rows_Columns(int& nrow, int& ncolumn);
	bool MergeUnits(const CString range1, const CString range2);
	bool Write_Picture(const CString range1, const CString range2, const CString PicPath, bool clamp = false);
public:
	//打开新的Excel文件
	BOOL Open();
	//打开strFile文件
	BOOL Open(CString strFile);
	//关闭文档，调用open之后，一定要调用close
	BOOL Close();
	//打开名为strSheet的表,这里只是临时添加的sheet，操作完成之后，一定要调用save保存
	BOOL OpenSheet(CString strSheet);
	//设置(ROW,COL)的字符strText
	BOOL SetItemText(long Row,long Col,CString strText);
	//取得(ROW,COL)的字符
	CString GetItemText(long Row,long Col);
	//退出excel
	void Exit();
	//显示excel
	void SetVisible(BOOL blnVisible);
	//查找此文件是否存在
	BOOL IsFileExist(CString strFn, BOOL bDir);
	//自动保存(针对打开已经存在的文件)
	void Save();
	//保存为strPath,这里的strPath最好不要指定excel的后缀
	//加了它会按照指定的后缀进行保存，但是不加，会自动识别版本然后按默认版本进行保存。
	void SaveAs(CString strPath);
	//添加新的表
	void AddSheet(CString strSheet);
	//得到新的选择区域
	void GetRange(CString strBegin,CString strEnd);
	//列自动展开
	void AutoColFit();
	//行自动展开
	void AutoRowFit();
	//设置自动换行
	void SetWrapText(BOOL blnTrue);
	//设置字体
	void SetFont(MyFont font);
	void SetFont(CString iStartCell,CString iEndCell,CString iFontName);
	void SetFontSize(CString iStartCell,CString iEndCell,long iSize);
	void SetFontBold(CString iStartCell,CString iEndCell,BOOL iBold);
	void SetBorder(CString iStartCell,CString iEndCell,long iStyle,long iWidth,long colorIndex=xlColorIndexAutomatic);
	void SetBorder(CString iStartCell,CString iEndCell,long iPos=xlAllSide,long iStyle=xlContinuous,long iWidth=xlThin,int r=0,int g=0,int b=0);
	//得到整个区域
	void GetAllRange();
	//合并单元格
	void SetMergeCells(BOOL blnTrue);
	//设置背景
	void SetBackStyle(MyBackStyle BackStyle);
	//设置边框
	void SetBorderLine(short Xposition,MyBorder XBorder);
	//设置对齐方式
	void SetAlignment(MyAlignment XMyAlignment);
	void SetAlignment(CString iStartCell,CString iEndCell,MyAlignment myAlignment);
	void SetTextWrap(CString iStartCell,CString iEndCell,BOOL iWrap);
	void SetColAutoFit(CString iStartCell,CString iEndCell);
	void SetRowAutoFit(CString iStartCell,CString iEndCell);
	//得到行数
	long GetRowS();
	//得到已经用的行数
	long GetUsedRows();
	//得到列数
	long GetColS();
	//得到已经用的列数
	long GetUsedCols();
	//设置数据的类型
	void SetNumberFormat(MyNumberFormat XNumberFormat);
	//设置列宽
	void SetColumnWidth(int intWidth);
	void SetColumnWidth(CString iCol,double iWidth);
	//设置行高
	void SetRowHeight(int intHeight);
	void SetRowHeight(CString iRow,double iHeight);
	//打印
	//CopySum:打印的份数
	void PrintOut(short CopySum);
	//打印预览
	//blnEnable:TRUE-允许修改 FALSE-不允许
	void PrePrintOut(BOOL blnEnable);
	//插入图片
	//strFilePath:文件名路径
	void InsertPicture(CString strFilePath);
	void InsertPicture(CString iStartCell,CString iEndCell,CString strFilePath);
	//设置背景图片
	//strFilePath:文件名路径
	void SetBackPicture(CString strFilePath);
	//返回当前程序所在路径
	CString GetAppPath();

	//////////////////////////////////////////////////////////////////////////
	//自己添加的函数
	//根据给定字符查询其在EXCEl表中的行号和列号
	BOOL QueryPosition(CString QueryValue,long &Row,long &Col);   
	//辅助函数，将列号转化成对应的excel表中对应的字母
	BOOL numberConvertToLetterInExcel(long number,CString &letter);
	// 读取一行
	BOOL ReadRow(CStringArray &RowValues, long row);
	BOOL ReadRowEx(CStringArray &RowValues,long row);
	BOOL ReadRow(CStringArray &strRowValues,long row,long colBegin,long colEnd);
	//写一行数据
	BOOL WriteRow(CStringArray &strRowValues,long row);
	BOOL WriteRow(CStringArray &strRowValues,long row,long colBegin);
	// 读取一列
	BOOL ReadColumn(CStringArray &strColValues,long col);
	BOOL ReadColumn(CStringArray &strColValues,long col,long rowBegin,long rowEnd);
	//写一列数据
	BOOL WriteColumn(CStringArray &strColValues,long col);
	BOOL WriteColumn(CStringArray &strColValues,long col,long rowBegin);               
	//将当前的sheet全部复制到sheetName中,并且当前工作表是名字为sheetName的表,sheetName表
	//紧随当前工作sheet表后
	BOOL CopySheet(CString sheetName);                                       
	//将名字为sheetName的工作表删除,如果删除的是当前的活动工作表，则将sheetName的
	//前一张或是后一张设为当前工作表
	BOOL DeleteSheet(CString sheetName);
	//获取指定编号的sheet表的名字,0表示获取当前的sheet名字
	BOOL GetSheetName(long index,CString &sheetName);
	//将下一个sheet设为工作sheet
	BOOL MoveToNextSheet();
	//将一块区域内容复制到另外一块区域
	void CopyToDestination(CString iBeginToCopy,CString iEndToCopy, CString iBeginDestination,CString iEndDestination);
	//功能：将制定Sheet中的制定区域内容及格式复制到当前Sheet的指定区域中
	void CopyToDestinationFromNewSheet(int iSheet, CString iBeginToCopy,CString iEndToCopy, CString iBeginDestination,CString iEndDestination);
	//取得指定Sheet
	CWorksheet GetSheet_CopyFrom(int i);
	//功能：将制定Sheet中的已用行内容及格式复制到当前Sheet的指定区域中
	void CopyUsedRowRangeToDestination(int iSheet, CString iBeginDestination,CString iEndDestination);
	//得到的单元格在EXCEL中的定位名称字符串 
	CString IndexToString( int row, int col );


	void SetCellHyperlinksToSheet(CString iCell,CString iLinksSheetName);

	void DeleteAllSheets();
protected:
private:
	//Excel的应用
	CApplication	MyApp;  
	CWorkbook		MyBook;
	CWorksheet		WorkSheet;   
	CWorkbooks		MyBooks;   
	CWorksheets		MySheets;   
	CRange			MyRange;  
	CString         strFilePath;
	bool            bFileOpened;         //判断是否已经打开一个文件

};

//-----------------------------------------------------------------------

#endif
#endif