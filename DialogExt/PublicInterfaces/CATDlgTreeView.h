//===================================================================
// COPYRIGHT  2010/12/26
//===================================================================
// CATDlgTreeView.cpp
// Header definition of class CATDlgTreeView
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2019/10/26 Creation: Code generated by the 3DS wizard
//===================================================================

#ifndef CATDlgTreeView_H
#define CATDlgTreeView_H

#include "CATUnicodeString.h"
#include "CATDialogExt.h"
#include "CATDialog.h"
#include <vector>

//
class ExportedByCATDialogExt CATDlgNode
{
public:

	CATDlgNode(CATUnicodeString iName, int iType, void *iVoid = NULL);
	void AddNewChild(CATDlgNode *newChild);//not init to tree
	//
	~CATDlgNode();

	void SetName(CATUnicodeString iName);
	void SetType(int iType);

	CATUnicodeString GetName();
	int GetType();
	//
	void SetMember(void *iVoid);
	void *GetMember();
	//
	int GetNbChild();
	CATDlgNode *GetChild(int i);
	//
	void SetState(int i);

	void SetTextRGB(int r,int g,int b);
	int GetState();
	class CATDlgNodeEmp;
	CATDlgNodeEmp *_ptr;
};

struct ExportedByCATDialogExt Color_Font
{
	COLORREF color;
	LOGFONT  logfont;
};

class ExportedByCATDialogExt CATDlgTreeView
{
public:
CATDlgTreeView (CATDialog *iParent/* CATDlgFrame,CATDlgContainer,...*/, CATUnicodeString iIcon/* 24*[24*N]*/,const bool &iCheckBox = true);
virtual ~CATDlgTreeView ();
//
void Init(CATDlgNode *iRootNode);
//
CATDlgNode *GetSelectNode();
CATDlgNode *GetParentNode(CATDlgNode *ipNode);
CATDlgNode *GetRootNode();
BOOL GetNodeCheckState(CATDlgNode *iNode);
void SetNodeCheckState(CATDlgNode *iNode, BOOL iState);
//
void InsertChild(CATDlgNode* pFatherNode, CATDlgNode* pChildNode, int iPos = 1);//-1,first;other,last;
void DeleteChild(CATDlgNode* pChildNode);
void UpdateNodeState(CATDlgNode *iNode);
void Expand(CATDlgNode *iNode);
//																				  
CATNotification * GetNodeDbNotification();
CATNotification * GetTreeLButtonNotification();
CATNotification * GetTreeRButtonNotification();
void MoveWindow(int x, int y, int nWidth, int nHeight, BOOL bRepaint = TRUE);

std::vector<CATDlgNode *> GetCheckedNode();
void ResetNodeColor(const int &r,const int &g,const int &b);

void Refresh();
private:
	class CATDlgTreeViewEmp;
	CATDlgTreeViewEmp *_ptr;
};
//-----------------------------------------------------------------------
#endif




/*
_pDlgTree = new CATDlgTreeView(_Frame1, "test.bmp");

//
CATDlgNode * pNewNode = new CATDlgNode("childname",0, NULL);
pFatherNode->AddNewChild(pNewNode);

//
_pDlgTree->Init(pFatherNode);
*/

/*



//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TestCmd::BuildGraph()
{
AddAnalyseNotificationCB(TestDlg, _pGWCreateARMDlgTestDlgGetWindSizeNotification(), (CATCommandMethod)&TestCmd::InitTreeCtr, NULL);
}

CATBoolean TestCmd::InitTreeCtr(void *data)
{
	if (_IsInitTree != 99)
	{
		_pGWCreateARMDlg->InitTreeData(_sArmPrdIcon);
		AddAnalyseNotificationCB(TestDlg->GetTreeCtr(), TestDlg->GetTreeDbNotification(), (CATCommandMethod)&TestCmd::ActionOnNodeDb, NULL);
		AddAnalyseNotificationCB(TestDlg->GetTreeCtr(), TestDlg->GetTreeLButtonNotification(), (CATCommandMethod)&TestCmd::ActionOnNodeLbutton, NULL);
		_IsInitTree = 99;
	}
	return TRUE;
}

*/