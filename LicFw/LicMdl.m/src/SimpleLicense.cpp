//===================================================================
// COPYRIGHT devfun 2024/03/19
//===================================================================
// SimpleLicense.cpp
// Header definition of class SimpleLicense
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2024/03/19 Creation: Code generated by the 3DS wizard
//===================================================================

#include "SimpleLicense.h"
#include "CATLib.h"
#include "Base64Code.h"
#include <stdio.h>
#include <vector>
#include "CATTimeSpan.h"

#define SplitSize 4

//-----------------------------------------------------------------------------
// SimpleLicense : constructor
//-----------------------------------------------------------------------------
SimpleLicense::SimpleLicense()
{
}

//-----------------------------------------------------------------------------
// SimpleLicense : destructor
//-----------------------------------------------------------------------------

SimpleLicense::~SimpleLicense()
{
//
// TODO: Place code here.
//
}

bool SimpleLicense::CheckDateLic(const CATTime &EndTime)
{
	CATTime CurTime = CATTime::GetCurrentLocalTime();
	return (CurTime - EndTime) < 0;
}

bool SimpleLicense::Init()
{
	const char *TempDir = ::CATGetTempDirectory();
	if (TempDir != NULL)
	{
		char *LicFile = new char[256];
		strcpy(LicFile,TempDir);
		strcat(LicFile,"../DassaultSystemes/");
		::CATCreateDirectory(LicFile);
		strcat(LicFile,"lic.data");
		if (CATLibError == ::CATFileAccess(LicFile,W_OK))
		{
			//文件不存在则新建,并写入当前日期
			CATTime CurTime = CATTime::GetCurrentLocalTime();

			CATUnicodeString sCurTime = CurTime.ConvertToString("%Y%m%d");

			Base64Code b64;
			CATUnicodeString sBase64 = b64.base64_encode(sCurTime.ConvertToChar(),sCurTime.GetLengthInChar());

			//每10个一组反向写入
			std::vector<CATUnicodeString> sWriteData;

			while (SplitSize <= sBase64.GetLengthInChar())
			{
				sWriteData.push_back(sBase64.SubString(0,SplitSize));
				sBase64 = sBase64.SubString(SplitSize,sBase64.GetLengthInChar() - SplitSize );
			}

			//写入到文件
			FILE *pFile = fopen(LicFile,"w");
			if (pFile)
			{
				for (int IndexOfData = sWriteData.size() - 1; IndexOfData >=0 ; IndexOfData--)
				{
					fprintf(pFile,sWriteData[IndexOfData].ConvertToChar());
				}
				fclose(pFile);
			}

			return true;
		}

		if (CATLibError != ::CATFileAccess(LicFile,W_OK))
		{
			//读取初始日期
			FILE *pFile = fopen(LicFile,"r");
			char buffer[100];
			size_t bytes = fread(buffer,1,sizeof(buffer),pFile);
			if (bytes > 0)
			{
				buffer[bytes] = '\0';
			}
			fclose(pFile);

			CATUnicodeString sData = buffer;

			std::vector<CATUnicodeString> sWriteData;
			while (SplitSize <= sData.GetLengthInChar())
			{
				sWriteData.push_back(sData.SubString(0,SplitSize));
				sData = sData.SubString(SplitSize,sData.GetLengthInChar() - SplitSize);
			}

			CATUnicodeString sBase64;
			for (int IndexOfData = sWriteData.size() - 1; IndexOfData >=0 ; IndexOfData--)
			{
				sBase64+=sWriteData[IndexOfData];
			}
			Base64Code b64;
			CATUnicodeString sStartDate = b64.base64_decode(sBase64.ConvertToChar()).c_str();

			//得到年月日
			int year,month,day;
			if (sStartDate.GetLengthInChar() == 8)
			{
				sStartDate.SubString(0,4).ConvertToNum(&year);
				sStartDate.SubString(4,2).ConvertToNum(&month);
				sStartDate.SubString(6,2).ConvertToNum(&day);
			}

			StartTime = CATTime(year,month,day,0,0,0);


			CATTime CurTime = CATTime::GetCurrentLocalTime();
			
			return (CurTime - StartTime) > 0;
		}
	}
	return false;
}
