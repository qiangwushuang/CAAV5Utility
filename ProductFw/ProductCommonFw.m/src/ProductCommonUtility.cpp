//===================================================================
// COPYRIGHT devfun 2024/04/01
//===================================================================
// ProductCommonUtility.cpp
// Header definition of class ProductCommonUtility
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2024/04/01 Creation: Code generated by the 3DS wizard
//===================================================================

#include "ProductCommonUtility.h"
#include "CATFrmEditor.h"
#include "CATIContainer.h"
#include "CATIPrtPart.h"
#include "SystemUtility.h"
#include "CATInit.h"
#include "CATPrsWorkModeServices.h"
#include "CATIDocRoots.h"
#include "CATDocumentServices.h"
#include "CATIProduct.h"
#include "CATILinkableObject.h"
#include "CATUnicodeString.h"
#include "CATDocument.h"
#include "CATLISTV_CATBaseUnknown.h"

//-----------------------------------------------------------------------------
// ProductCommonUtility : constructor
//-----------------------------------------------------------------------------
ProductCommonUtility::ProductCommonUtility()
{
//
//TODO: Add the constructor code here
//
}

//-----------------------------------------------------------------------------
// ProductCommonUtility : destructor
//-----------------------------------------------------------------------------

ProductCommonUtility::~ProductCommonUtility()
{
//
// TODO: Place code here.
//
}

CATIProduct_var ProductCommonUtility::OpenProduct(const CATUnicodeString &iPath)
{
	CATIProduct_var spIProduct = NULL_var;
	CATDocument *pDoc = NULL;
	CATDocumentServices::OpenDocument(iPath,pDoc);
	if (pDoc != NULL)
	{
		CATIDocRoots *pDocRoots = NULL;
		if (SUCCEEDED(pDoc->QueryInterface(IID_CATIDocRoots,(void **)&pDocRoots)) && pDocRoots != NULL)
		{
			CATListValCATBaseUnknown_var *pRootProducts = pDocRoots->GiveDocRoots();
			if (pRootProducts->Size() > 0)
			{
				spIProduct = (*pRootProducts)[1];
			}
		}
	}
	return spIProduct;
}

HRESULT ProductCommonUtility::GetContainer(CATIProduct_var ispProduct,CATIContainer *&oIContainer)
{
	HRESULT rc = E_FAIL;
	if (ispProduct == NULL_var)
	{
		return rc;
	}
	//打开编辑模式
	rc = CATPrsWorkModeServices::SetWorkMode(ispProduct,CATPrsWorkModeServices::WM_DESIGN);
	if (SUCCEEDED(rc))
	{
		// loads the document and initializes it
		CATDocument *pDoc = NULL;
		SystemUtility::GetDocumentFromProduct(ispProduct,pDoc); 
		if (NULL == pDoc )
		{
			return E_FAIL;
		}
		SEQUENCE( CATBaseUnknown_ptr ) listMemberOfDoc = pDoc->ListMembers(CATIContainer::ClassName() );
		if (listMemberOfDoc.length() > 0)
		{
			rc =listMemberOfDoc[0]->QueryInterface(IID_CATIContainer,(void **)&oIContainer);
		}
	}
	return rc;
}

HRESULT ProductCommonUtility::GetRootProduct(CATIProduct_var &oProduct)
{
	CATFrmEditor *pFrmEditor = CATFrmEditor::GetCurrentEditor();
	if (pFrmEditor != NULL_var)
	{
		CATDocument *pDoc = pFrmEditor->GetDocument();
		if (pDoc != NULL)
		{
			CATIDocRoots *pDocRoots = NULL;
			if (SUCCEEDED(pDoc->QueryInterface(IID_CATIDocRoots,(void **)&pDocRoots)) && pDocRoots != NULL)
			{
				CATListValCATBaseUnknown_var *pRootProducts = pDocRoots->GiveDocRoots();
				if (pRootProducts->Size() > 0)
				{
					oProduct = (*pRootProducts)[1];
				}
				else
				{
					return E_FAIL;
				}
			}
			else
			{
				return E_FAIL;
			}
		}
		else
		{
			return E_FAIL;
		}
	}
	
	return S_OK;
}

HRESULT ProductCommonUtility::GetPartContainer(CATIProduct_var ispProduct,CATIPrtContainer *&oPrtContainer)
{
	HRESULT rc = E_FAIL;
	if (ispProduct == NULL_var)
	{
		return rc;
	}
	//打开编辑模式
	rc = CATPrsWorkModeServices::SetWorkMode(ispProduct,CATPrsWorkModeServices::WM_DESIGN);
	if (SUCCEEDED(rc))
	{
		// loads the document and initializes it
		CATDocument *pDoc = NULL;
		SystemUtility::GetDocumentFromProduct(ispProduct,pDoc); 
		if (NULL == pDoc )
		{
			return E_FAIL;
		}
		// Part Container 
		CATIPrtContainer *piPartContainer = NULL ; 

		// queries on the document to get the root container
		CATInit *pDocAsInit = NULL; 
		pDoc->QueryInterface(IID_CATInit, (void**)&pDocAsInit) ; 
		if ( NULL != pDocAsInit )
		{
			// Extracts from document a reference to its part in hPartAsRequest
			CATBaseUnknown *pRootContainer = pDocAsInit->GetRootContainer("CATIPrtContainer");
			pDocAsInit->Release(); pDocAsInit = NULL ;

			if( NULL != pRootContainer )
			{
				rc = pRootContainer->QueryInterface(IID_CATIPrtContainer,(void **)&oPrtContainer);
				pRootContainer->Release();
				pRootContainer = NULL;
			} 
		} 
	}
	return E_FAIL;
}

HRESULT ProductCommonUtility::GetPrtPart(CATIProduct_var ispProduct,CATIPrtPart_var ospPrtPart)
{
	HRESULT rc = E_FAIL;
	CATIPrtContainer *pIPrtContainer = NULL;
	if (FAILED(GetPartContainer(ispProduct,pIPrtContainer)) || pIPrtContainer == NULL)
	{
		return E_FAIL;
	}

	ospPrtPart = pIPrtContainer->GetPart();
	pIPrtContainer->Release();
	pIPrtContainer = NULL;
	return S_OK;
}